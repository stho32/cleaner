on:
    push:

env:
    DOTNET_VERSION: "8.0.x" # The .NET SDK version to use
    SOLUTION_DIR: "cleaner"
    PROJECT: "./cleaner/cleaner.csproj"
    RELEASEPREFIX: "cleaner"

jobs:
    build:
        name: Build and Publish
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
                include:
                    - os: ubuntu-latest
                      RUNTIMEID: linux-x64
                      OUTPUTDIR: cleaner-linux-x64

                    - os: windows-latest
                      RUNTIMEID: win-x64
                      OUTPUTDIR: cleaner-win-x64

        steps:
            - uses: actions/checkout@v2
            - name: Setup .NET Core
              uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install dependencies
              run: dotnet restore
              working-directory: Source/${{ env.SOLUTION_DIR }}

            - name: Build
              run: dotnet build --configuration Release --no-restore
              working-directory: Source/${{ env.SOLUTION_DIR }}

            - name: Test + Cover
              run: dotnet test
              working-directory: Source/${{ env.SOLUTION_DIR }}

            - name: Publish
              run: dotnet publish ${{ env.PROJECT }} -c Release -o ${{matrix.OUTPUTDIR}} -p:PublishReadyToRun=true --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:UseAppHost=true -r ${{matrix.RUNTIMEID}}
              working-directory: Source/${{ env.SOLUTION_DIR }}

            - uses: vimtor/action-zip@v1
              with:
                  files: ./Source/${{ env.SOLUTION_DIR }}/${{matrix.OUTPUTDIR}}/
                  dest: ${{ env.SOLUTION_DIR }}/${{matrix.OUTPUTDIR}}.zip

    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v2

            - name: Create Release
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      ${{ env.SOLUTION_DIR }}/${{needs.build.outputs.OUTPUTDIR}}.zip

    post:
        name: Cleanup on Failure
        runs-on: ubuntu-latest
        if: failure()
        steps:
            - name: Delete Draft Release
              run: |
                RELEASE_ID=$(gh api -X GET "repos/${{ github.repository }}/releases" | jq 'map(select(.draft == true)) | .[0].id')
                if [ -n "$RELEASE_ID" ]; then
                  gh api -X DELETE "repos/${{ github.repository }}/releases/$RELEASE_ID"
                fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
